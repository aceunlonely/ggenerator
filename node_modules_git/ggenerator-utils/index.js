var fs = require( 'fs' ),
    stat = fs.statSync
   



/**
 * 删除文件夹
 */
var delDir2 = function(path) {

    var files = [];

    if( fs.existsSync(path) ) {

        files = fs.readdirSync(path);

        files.forEach(function(file,index){

            var curPath = path + "/" + file;

            if(fs.statSync(curPath).isDirectory()) { // recurse

                delDir2(curPath);

            } else { // delete file

                fs.unlinkSync(curPath);

            }

        });

        fs.rmdirSync(path);

    }

};

/*
 * 复制目录中的所有文件包括子目录
 * @param{ String } 需要复制的目录
 * @param{ String } 复制到指定的目录
 */
var copy = function( src, dst , callback ){
    // 读取目录中的所有文件/目录
    var paths = fs.readdirSync(src);
        paths.forEach(function( path ){
            var _src = src + '/' + path,
                _dst = dst + '/' + path;
               // readable, writable;   

                var st = fs.statSync(_src);
                // 判断是否为文件
                if( st.isFile() ){
                    // 创建读取流
                    //readable = fs.createReadStream( _src );
                    // 创建写入流
                    
                    //writable = fs.createWriteStream( _dst );   
                    // 通过管道来传输流
                    //readable.pipe( writable );
                    fs.writeFileSync(_dst,fs.readFileSync(_src))
                    
                }
                // 如果是目录则递归调用自身
                else if( st.isDirectory() ){
                    exists( _src, _dst, copy );
                }
        });
};
// 在复制目录前需要判断该目录是否存在，不存在需要先创建目录
var exists = function( src, dst, callback ){

    if(fs.existsSync(dst))
    {
        callback( src, dst );
    }
    else
    {
        fs.mkdirSync(dst);
        callback( src, dst );
    }
};















// 对外接口
exports.copyDir = copy

exports.delDir = delDir2

exports.existsDir = exists